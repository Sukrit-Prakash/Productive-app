import { StyleSheet } from 'react-native';
import TaskList from '@/components/ui/TaskList'; // Ensure TaskList is a valid named or default export
import { useState, useEffect } from 'react';
import { View, Text } from 'react-native';
// import axios from 'axios';

export default function TaskScreen() {
  // const userId = "674ab742ead0a08bab8856c2"; // Fixed: Assigned directly
  const [task, setTask] = useState([]);

  // useEffect(() => {
  //   const fetchTask = async () => {
  //     try {
  //       // Replace localhost with the appropriate IP address
  //       // const response = await axios.get(`http://192.168.1.41:8081/api/tasks/${userId}`);

        
  //       // const response = await axios.get('http://192.168.1.41:8081/api/tasks/674ab742ead0a08bab8856c2');
  //       // const response = await axios.get('http://10.0.2.2:3000/api/tasks/674ab742ead0a08bab8856c2');
  //       // const response = await axios.get('http://127.0.0.1:3000/api/tasks/674ab742ead0a08bab8856c2');

  //       // const response = await axios.get('http://192.168.21.1:3000/api/tasks/674ab742ead0a08bab8856c2');
  //       console.log(response)
  //       setTask(response.data); // Ensure response.data contains the array of tasks
  //     } catch (error) {
  //       console.log('Error fetching tasks:', error.message);
  //     }
  //   };
  //   fetchTask();
  // }, [userId]);
  const response = [
    {
      "_id": "TASK_ID_1",
      "userId": "674ab742ead0a08bab8856c2",
      "taskTitle": "Complete React Native Project",
      "description": "Finish the front-end and integrate all APIs.",
      "dueDate": "2024-12-01T00:00:00.000Z",
      "priority": "high",
      "status": "pending",
      "createdAt": "2024-11-26T00:00:00.000Z"
    },
    {
      "_id": "TASK_ID_2",
      "userId": "674ab742ead0a08bab8856c2",
      "taskTitle": "Team Meeting",
      "description": "Discuss project progress with the team.",
      "dueDate": "2024-11-27T10:00:00.000Z",
      "priority": "medium",
      "status": "pending",
      "createdAt": "2024-11-26T00:00:00.000Z"
    }
    // Additional tasks...
  ]
  
  setTask(response);

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Your Tasks</Text>
      <TaskList tasks={task} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },
});



this is just a sample text 

// import React, {useState} from 'react';
// import {StyleSheet, Text, TouchableOpacity, View} from 'react-native';
// import type {PropsWithChildren} from 'react';

// const FlexDirectionBasics = () => {
//   const [flexDirection, setflexDirection] = useState('column');

//   return (
//     <PreviewLayout
//       label="flexDirection"
//       values={['column', 'row', 'row-reverse', 'column-reverse']}
//       selectedValue={flexDirection}
//       setSelectedValue={setflexDirection}>
//       <View style={[styles.box, {backgroundColor: 'powderblue'}]} />
//       <View style={[styles.box, {backgroundColor: 'skyblue'}]} />
//       <View style={[styles.box, {backgroundColor: 'steelblue'}]} />
//     </PreviewLayout>
//   );
// };

// type PreviewLayoutProps = PropsWithChildren<{
//   label: string;
//   values: string[];
//   selectedValue: string;
//   setSelectedValue: (value: string) => void;
// }>;

// const PreviewLayout = ({
//   label,
//   children,
//   values,
//   selectedValue,
//   setSelectedValue,
// }: PreviewLayoutProps) => (
//   <View style={{padding: 10, flex: 1}}>
//     <Text style={styles.label}>{label}</Text>
//     <View style={styles.row}>
//       {values.map(value => (
//         <TouchableOpacity
//           key={value}
//           onPress={() => setSelectedValue(value)}
//           style={[styles.button, selectedValue === value && styles.selected]}>
//           <Text
//             style={[
//               styles.buttonLabel,
//               selectedValue === value && styles.selectedLabel,
//             ]}>
//             {value}
//           </Text>
//         </TouchableOpacity>
//       ))}
//     </View>
//     <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>
//   </View>
// );

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     marginTop: 8,
//     backgroundColor: 'aliceblue',
//   },
//   box: {
//     width: 50,
//     height: 50,
//   },
//   row: {
//     flexDirection: 'row',
//     flexWrap: 'wrap',
//   },
//   button: {
//     paddingHorizontal: 8,
//     paddingVertical: 6,
//     borderRadius: 4,
//     backgroundColor: 'oldlace',
//     alignSelf: 'flex-start',
//     marginHorizontal: '1%',
//     marginBottom: 6,
//     minWidth: '48%',
//     textAlign: 'center',
//   },
//   selected: {
//     backgroundColor: 'coral',
//     borderWidth: 0,
//   },
//   buttonLabel: {
//     fontSize: 12,
//     fontWeight: '500',
//     color: 'coral',
//   },
//   selectedLabel: {
//     color: 'white',
//   },
//   label: {
//     textAlign: 'center',
//     marginBottom: 10,
//     fontSize: 24,
//   },
// });

// export default FlexDirectionBasics;